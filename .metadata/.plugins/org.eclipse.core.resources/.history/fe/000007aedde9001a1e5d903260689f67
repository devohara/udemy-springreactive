package com.udemy.springboot.reactor.app;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.udemy.springboot.reactor.app.models.Usuario;

import reactor.core.publisher.Flux;

@SpringBootApplication
public class SpringBootReactorApplication implements CommandLineRunner {

	private static final Logger log = LoggerFactory.getLogger(SpringBootReactorApplication.class);

	public static void main(String[] args) {
		SpringApplication.run(SpringBootReactorApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {

//		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Vicente", "Belinda")
//				.doOnNext(elemento -> System.out.println(elemento));

		// para los casos en los que haya más de una línea, se utilizan las llaves
//		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Vicente", "Belinda")
//				.doOnNext(elemento -> {
//					System.out.println(elemento);
//				});

		// en java 8, la expresión quedaría así
//		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Vicente", "Belinda")
//				.doOnNext(System.out::println);

//		nombres.subscribe(e -> log.info(e));
//		nombres.subscribe(log::info);

		// manejo de errores
//		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "", "Vicente", "Belinda").doOnNext(elemento -> {
//			if (elemento.isEmpty()) {
//				throw new RuntimeException("Nombres no puede ser vacío");
//			}
//			System.out.println(elemento);
//
//		});
//
//		nombres.subscribe(e -> log.info(e), error -> log.error(error.getMessage()));
		
		//evento onComplete
//		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Serafín", "Vicente", "Belinda").doOnNext(elemento -> {
//			if (elemento.isEmpty()) {
//				throw new RuntimeException("Nombres no puede ser vacío");
//			}
//			System.out.println(elemento);
//
//		});
//
//		nombres.subscribe(e -> log.info(e), error -> log.error(error.getMessage()), 
//				new Runnable() {
//					
//					@Override
//					public void run() {
//						
//						log.info("Ha finalizado la ejecución del observable con éxito");
//						
//					}
//				});

		
		//Operador map
//		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Serafín", "Vicente", "Belinda").doOnNext(elemento -> {
//			if (elemento.isEmpty()) {
//				throw new RuntimeException("Nombres no puede ser vacío");
//			}
//			System.out.println(elemento);
//
//		})
//				.map(nombre -> {
//					return nombre.toUpperCase();
//				});
//
//		nombres.subscribe(e -> log.info(e), error -> log.error(error.getMessage()), 
//				new Runnable() {
//					
//					@Override
//					public void run() {
//						
//						log.info("Ha finalizado la ejecución del observable con éxito");
//						
//					}
//				});
//
//	}
	//operador map a otro objeto
	Flux<Usuario> nombres = Flux.just("Luisa", "Rodolfo", "Serafín", "Vicente", "Belinda")
			.map(nombre -> new Usuario(nombre, null))
			.doOnNext(usuario -> {
		if (usuario == null) {
			throw new RuntimeException("Nombres no puede ser vacío");
		}
		System.out.println(usuario.gen);

	})
			;

	nombres.subscribe(e -> log.info(e), error -> log.error(error.getMessage()), 
			new Runnable() {
				
				@Override
				public void run() {
					
					log.info("Ha finalizado la ejecución del observable con éxito");
					
				}
			});

}

}
