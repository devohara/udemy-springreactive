package com.udemy.springboot.reactor.app;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.udemy.springboot.reactor.app.models.Usuario;

import reactor.core.publisher.Flux;

@SpringBootApplication
public class SpringBootReactorApplication implements CommandLineRunner {

	private static final Logger log = LoggerFactory.getLogger(SpringBootReactorApplication.class);

	public static void main(String[] args) {
		SpringApplication.run(SpringBootReactorApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {

//		crearObservable();
//		observableManejoErrores();
//		observConEventoOnComplete();
//		obsOperadorMapSencillo();
//		obsOperadorMapOtroObjeto();
//		obsOperadorFilter();
		obsIterable();
	}

	public void crearObservable() throws Exception {

//		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Vicente", "Belinda")
//				.doOnNext(elemento -> System.out.println(elemento));

		// para los casos en los que haya más de una línea, se utilizan las llaves
//		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Vicente", "Belinda")
//				.doOnNext(elemento -> {
//					System.out.println(elemento);
//				});

		// en java 8, la expresión quedaría así
		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Vicente", "Belinda").doOnNext(System.out::println);

//		nombres.subscribe(e -> log.info(e));
		nombres.subscribe(log::info);
	}

	public void observableManejoErrores() throws Exception {

		// manejo de errores
		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "", "Vicente", "Belinda").doOnNext(elemento -> {
			if (elemento.isEmpty()) {
				throw new RuntimeException("Nombres no puede ser vacío");
			}
			System.out.println(elemento);

		});

		nombres.subscribe(e -> log.info(e), error -> log.error(error.getMessage()));
	}

	public void observConEventoOnComplete() throws Exception {
		// evento onComplete
		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Serafín", "Vicente", "Belinda").doOnNext(elemento -> {
			if (elemento.isEmpty()) {
				throw new RuntimeException("Nombres no puede ser vacío");
			}
			System.out.println(elemento);

		});

		nombres.subscribe(e -> log.info(e), error -> log.error(error.getMessage()), new Runnable() {

			@Override
			public void run() {

				log.info("Ha finalizado la ejecución del observable con éxito");

			}
		});
	}

	public void obsOperadorMapSencillo() throws Exception {

		Flux<String> nombres = Flux.just("Luisa", "Rodolfo", "Serafín", "Vicente", "Belinda").doOnNext(elemento -> {
			if (elemento.isEmpty()) {
				throw new RuntimeException("Nombres no puede ser vacío");
			}
			System.out.println(elemento);

		}).map(nombre -> {
			return nombre.toUpperCase();
		});

		nombres.subscribe(e -> log.info(e), error -> log.error(error.getMessage()), new Runnable() {

			@Override
			public void run() {

				log.info("Ha finalizado la ejecución del observable con éxito");

			}
		});
	}

	public void obsOperadorMapOtroObjeto() throws Exception {

		Flux<Usuario> nombres = Flux.just("Luisa", "Rodolfo", "Serafín", "Vicente", "Belinda")
				.map(nombre -> new Usuario(nombre.toUpperCase(), null)).doOnNext(usuario -> {
					if (usuario == null) {
						throw new RuntimeException("Nombres no puede ser vacío");
					}
					System.out.println(usuario.getNombre());

				}).map(usuario -> {
					String nombre = usuario.getNombre().toLowerCase();
					usuario.setNombre(nombre);
					return usuario;
				});

		nombres.subscribe(e -> log.info(e.toString()), error -> log.error(error.getMessage()), new Runnable() {

			@Override
			public void run() {

				log.info("Ha finalizado la ejecución del observable con éxito");

			}
		});
	}

	public void obsOperadorFilter() throws Exception {

		Flux<Usuario> nombres = Flux
				.just("Luisa Cano", "Rodolfo Martín", "Luisa Velasco", "Serafín Nogales", "Vicente Huesca",
						"Belinda Cáceres")
				.map(nombre -> new Usuario(nombre.split(" ")[0].toUpperCase(), nombre.split(" ")[1].toUpperCase()))
				.filter(usuario -> usuario.getNombre().equalsIgnoreCase("Luisa")).doOnNext(usuario -> {
					if (usuario == null) {
						throw new RuntimeException("Nombres no puede ser vacío");
					}
					System.out.println(usuario.getNombre().concat(" ").concat(usuario.getApellido()));

				}).map(usuario -> {
					String nombre = usuario.getNombre().toLowerCase();
					usuario.setNombre(nombre);
					return usuario;
				});

		nombres.subscribe(e -> log.info(e.toString()), error -> log.error(error.getMessage()), new Runnable() {

			@Override
			public void run() {

				log.info("Ha finalizado la ejecución del observable con éxito");

			}
		});
	}

	public void obsIterable() throws Exception {
		List<String> usuariosList = new ArrayList<>();
		usuariosList.add("Luisa Cano");
		usuariosList.add("Rodolfo Martín");
		usuariosList.add("Luisa Velasco");
		usuariosList.add("Serafín Nogales");
		usuariosList.add("Vicente Huesca");
		usuariosList.add("Belinda Cáceres");

		Flux<String> nombres = Flux.fromIterable(usuariosList);

		Flux<Usuario> usuarios = nombres
				.map(nombre -> new Usuario(nombre.split(" ")[0].toUpperCase(), nombre.split(" ")[1].toUpperCase()))
				.filter(usuario -> usuario.getNombre().equalsIgnoreCase("Luisa")).doOnNext(usuario -> {
					if (usuario == null) {
						throw new RuntimeException("Nombres no puede ser vacío");
					}
					System.out.println(usuario.getNombre().concat(" ").concat(usuario.getApellido()));

				}).map(usuario -> {
					String nombre = usuario.getNombre().toLowerCase();
					usuario.setNombre(nombre);
					return usuario;
				});

		usuarios.subscribe(e -> log.info(e.toString()), error -> log.error(error.getMessage()), new Runnable() {

			@Override
			public void run() {

				log.info("Ha finalizado la ejecución del observable con éxito");

			}
		});
	}

}
